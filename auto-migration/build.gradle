apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'realm-android'


android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 26
        versionCode 1
        versionName "0.6.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:support-annotations:26.+'
//    implementation 'com.github.Zhuinden:state-bundle:1.1.5'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:1.7.1'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:3.0'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    androidTestImplementation 'junit:junit:4.12'
}

configurations.all {
    resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.2"
}
//
//// build a jar with source files
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.compile
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}
